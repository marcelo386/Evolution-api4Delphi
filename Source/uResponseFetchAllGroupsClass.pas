unit uResponseFetchAllGroupsClass;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2024-09-22 10:52:59
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses Generics.Collections, Rest.Json;

type

TResultClass = class
private
  FAnnounce: Boolean;
  FCreation: Extended;
  FDesc: String;
  FDescId: String;
  FId: String;
  FOwner: String;
  FRestrict: Boolean;
  FSize: Extended;
  FSubject: String;
  FSubjectOwner: String;
  FSubjectTime: Extended;
public
  property announce: Boolean read FAnnounce write FAnnounce;
  property creation: Extended read FCreation write FCreation;
  property desc: String read FDesc write FDesc;
  property descId: String read FDescId write FDescId;
  property id: String read FId write FId;
  property owner: String read FOwner write FOwner;
  property restrict: Boolean read FRestrict write FRestrict;
  property size: Extended read FSize write FSize;
  property subject: String read FSubject write FSubject;
  property subjectOwner: String read FSubjectOwner write FSubjectOwner;
  property subjectTime: Extended read FSubjectTime write FSubjectTime;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TResultClass;
end;

TResponseAllGroupsClass = class
private
  FResult: TArray<TResultClass>;
public
  property result: TArray<TResultClass> read FResult write FResult;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TResponseAllGroupsClass;
end;

implementation

{TResultClass}


function TResultClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TResultClass.FromJsonString(AJsonString: string): TResultClass;
begin
  result := TJson.JsonToObject<TResultClass>(AJsonString)
end;

{TResponseAllGroupsClass}

destructor TResponseAllGroupsClass.Destroy;
var
  LresultItem: TResultClass;
begin

 for LresultItem in FResult do
   LresultItem.free;

  inherited;
end;

function TResponseAllGroupsClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TResponseAllGroupsClass.FromJsonString(AJsonString: string): TResponseAllGroupsClass;
begin
  result := TJson.JsonToObject<TResponseAllGroupsClass>(AJsonString)
end;

end.

