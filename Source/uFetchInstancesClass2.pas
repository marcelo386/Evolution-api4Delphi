unit uFetchInstancesClass2;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2024-09-07 13:17:22
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses Generics.Collections, Rest.Json;

type

T_countClass = class
private
  FChat: Extended;
  FContact: Extended;
  FMessage: Extended;
public
  property Chat: Extended read FChat write FChat;
  property Contact: Extended read FContact write FContact;
  property Message: Extended read FMessage write FMessage;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): T_countClass;
end;

TSettingClass = class
private
  FAlwaysOnline: Boolean;
  FCreatedAt: String;
  FGroupsIgnore: Boolean;
  FId: String;
  FInstanceId: String;
  FMsgCall: String;
  FReadMessages: Boolean;
  FReadStatus: Boolean;
  FRejectCall: Boolean;
  FSyncFullHistory: Boolean;
  FUpdatedAt: String;
public
  property alwaysOnline: Boolean read FAlwaysOnline write FAlwaysOnline;
  property createdAt: String read FCreatedAt write FCreatedAt;
  property groupsIgnore: Boolean read FGroupsIgnore write FGroupsIgnore;
  property id: String read FId write FId;
  property instanceId: String read FInstanceId write FInstanceId;
  property msgCall: String read FMsgCall write FMsgCall;
  property readMessages: Boolean read FReadMessages write FReadMessages;
  property readStatus: Boolean read FReadStatus write FReadStatus;
  property rejectCall: Boolean read FRejectCall write FRejectCall;
  property syncFullHistory: Boolean read FSyncFullHistory write FSyncFullHistory;
  property updatedAt: String read FUpdatedAt write FUpdatedAt;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TSettingClass;
end;

TFetchinstancesClass = class
private
  FSetting: TSettingClass;
  F_count: T_countClass;
  FClientName: String;
  FConnectionStatus: String;
  FCreatedAt: String;
  FId: String;
  FIntegration: String;
  FName: String;
  FNumber: String;
  FOwnerJid: String;
  FProfileName: String;
  FProfilePicUrl: String;
  FToken: String;
  FUpdatedAt: String;
public
  property Setting: TSettingClass read FSetting write FSetting;
  property _count: T_countClass read F_count write F_count;
  property clientName: String read FClientName write FClientName;
  property connectionStatus: String read FConnectionStatus write FConnectionStatus;
  property createdAt: String read FCreatedAt write FCreatedAt;
  property id: String read FId write FId;
  property integration: String read FIntegration write FIntegration;
  property name: String read FName write FName;
  property number: String read FNumber write FNumber;
  property ownerJid: String read FOwnerJid write FOwnerJid;
  property profileName: String read FProfileName write FProfileName;
  property profilePicUrl: String read FProfilePicUrl write FProfilePicUrl;
  property token: String read FToken write FToken;
  property updatedAt: String read FUpdatedAt write FUpdatedAt;
  constructor Create;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TFetchinstancesClass;
end;

TResultClass = class
private
  FFetchinstances: TArray<TFetchinstancesClass>;
public
  property fetchinstances: TArray<TFetchinstancesClass> read FFetchinstances write FFetchinstances;
  destructor Destroy; override;
  function ToJsonString: string;
  class function FromJsonString(AJsonString: string): TResultClass;
end;

implementation

{T_countClass}


function T_countClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function T_countClass.FromJsonString(AJsonString: string): T_countClass;
begin
  result := TJson.JsonToObject<T_countClass>(AJsonString)
end;

{TSettingClass}


function TSettingClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TSettingClass.FromJsonString(AJsonString: string): TSettingClass;
begin
  result := TJson.JsonToObject<TSettingClass>(AJsonString)
end;

{TFetchinstancesClass}

constructor TFetchinstancesClass.Create;
begin
  inherited;
  FSetting := TSettingClass.Create();
  F_count := T_countClass.Create();
end;

destructor TFetchinstancesClass.Destroy;
begin
  FSetting.free;
  F_count.free;
  inherited;
end;

function TFetchinstancesClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TFetchinstancesClass.FromJsonString(AJsonString: string): TFetchinstancesClass;
begin
  result := TJson.JsonToObject<TFetchinstancesClass>(AJsonString)
end;

{TResultClass}

destructor TResultClass.Destroy;
var
  LfetchinstancesItem: TFetchinstancesClass;
begin

 for LfetchinstancesItem in FFetchinstances do
   LfetchinstancesItem.free;

  inherited;
end;

function TResultClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TResultClass.FromJsonString(AJsonString: string): TResultClass;
begin
  result := TJson.JsonToObject<TResultClass>(AJsonString)
end;

end.
